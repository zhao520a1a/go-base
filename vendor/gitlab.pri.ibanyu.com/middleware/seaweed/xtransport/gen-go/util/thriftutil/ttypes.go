// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thriftutil

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ErrInfo struct {
	Code int32  `thrift:"code,1,required" json:"code"`
	Msg  string `thrift:"msg,2,required" json:"msg"`
}

func NewErrInfo() *ErrInfo {
	return &ErrInfo{}
}

func (p *ErrInfo) GetCode() int32 {
	return p.Code
}

func (p *ErrInfo) GetMsg() string {
	return p.Msg
}
func (p *ErrInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ErrInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *ErrInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ErrInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ErrInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ErrInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return fmt.Errorf("%T.code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:code: %s", p, err)
	}
	return err
}

func (p *ErrInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:msg: %s", p, err)
	}
	return err
}

func (p *ErrInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrInfo(%+v)", *p)
}

type Head struct {
	Uid      int64  `thrift:"uid,1" json:"uid"`
	Source   int32  `thrift:"source,2" json:"source"`
	Ip       string `thrift:"ip,3" json:"ip"`
	Region   string `thrift:"region,4" json:"region"`
	Dt       int32  `thrift:"dt,5" json:"dt"`
	Unionid  string `thrift:"unionid,6" json:"unionid"`
	Did      string `thrift:"did,7" json:"did"`
	Zone     int32  `thrift:"zone,8" json:"zone"`
	ZoneName string `thrift:"zone_name,9" json:"zone_name"`
}

func NewHead() *Head {
	return &Head{}
}

func (p *Head) GetUid() int64 {
	return p.Uid
}

func (p *Head) GetSource() int32 {
	return p.Source
}

func (p *Head) GetIp() string {
	return p.Ip
}

func (p *Head) GetRegion() string {
	return p.Region
}

func (p *Head) GetDt() int32 {
	return p.Dt
}

func (p *Head) GetUnionid() string {
	return p.Unionid
}

func (p *Head) GetDid() string {
	return p.Did
}

func (p *Head) GetZone() int32 {
	return p.Zone
}

func (p *Head) GetZoneName() string {
	return p.ZoneName
}
func (p *Head) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Head) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *Head) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *Head) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Ip = v
	}
	return nil
}

func (p *Head) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *Head) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Dt = v
	}
	return nil
}

func (p *Head) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Unionid = v
	}
	return nil
}

func (p *Head) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Did = v
	}
	return nil
}

func (p *Head) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Zone = v
	}
	return nil
}

func (p *Head) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.ZoneName = v
	}
	return nil
}

func (p *Head) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Head"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Head) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *Head) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:source: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Source)); err != nil {
		return fmt.Errorf("%T.source (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:source: %s", p, err)
	}
	return err
}

func (p *Head) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ip: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ip)); err != nil {
		return fmt.Errorf("%T.ip (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ip: %s", p, err)
	}
	return err
}

func (p *Head) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:region: %s", p, err)
	}
	return err
}

func (p *Head) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dt", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:dt: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Dt)); err != nil {
		return fmt.Errorf("%T.dt (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:dt: %s", p, err)
	}
	return err
}

func (p *Head) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unionid", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:unionid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Unionid)); err != nil {
		return fmt.Errorf("%T.unionid (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:unionid: %s", p, err)
	}
	return err
}

func (p *Head) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("did", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:did: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Did)); err != nil {
		return fmt.Errorf("%T.did (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:did: %s", p, err)
	}
	return err
}

func (p *Head) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("zone", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:zone: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Zone)); err != nil {
		return fmt.Errorf("%T.zone (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:zone: %s", p, err)
	}
	return err
}

func (p *Head) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:zone_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ZoneName)); err != nil {
		return fmt.Errorf("%T.zone_name (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:zone_name: %s", p, err)
	}
	return err
}

func (p *Head) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Head(%+v)", *p)
}

type Control struct {
	Route  *Route    `thrift:"route,1" json:"route"`
	Ct     int64     `thrift:"ct,2" json:"ct"`
	Et     int64     `thrift:"et,3" json:"et"`
	Caller *Endpoint `thrift:"caller,4" json:"caller"`
}

func NewControl() *Control {
	return &Control{}
}

var Control_Route_DEFAULT Route

func (p *Control) GetRoute() Route {
	if !p.IsSetRoute() {
		return Control_Route_DEFAULT
	}
	return *p.Route
}

func (p *Control) GetCt() int64 {
	return p.Ct
}

func (p *Control) GetEt() int64 {
	return p.Et
}

var Control_Caller_DEFAULT Endpoint

func (p *Control) GetCaller() Endpoint {
	if !p.IsSetCaller() {
		return Control_Caller_DEFAULT
	}
	return *p.Caller
}
func (p *Control) IsSetRoute() bool {
	return p.Route != nil
}

func (p *Control) IsSetCaller() bool {
	return p.Caller != nil
}

func (p *Control) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Control) ReadField1(iprot thrift.TProtocol) error {
	p.Route = &Route{}
	if err := p.Route.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Route, err)
	}
	return nil
}

func (p *Control) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Ct = v
	}
	return nil
}

func (p *Control) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Et = v
	}
	return nil
}

func (p *Control) ReadField4(iprot thrift.TProtocol) error {
	p.Caller = &Endpoint{}
	if err := p.Caller.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Caller, err)
	}
	return nil
}

func (p *Control) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Control"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Control) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoute() {
		if err := oprot.WriteFieldBegin("route", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:route: %s", p, err)
		}
		if err := p.Route.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Route, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:route: %s", p, err)
		}
	}
	return err
}

func (p *Control) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ct", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ct: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Ct)); err != nil {
		return fmt.Errorf("%T.ct (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ct: %s", p, err)
	}
	return err
}

func (p *Control) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("et", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:et: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Et)); err != nil {
		return fmt.Errorf("%T.et (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:et: %s", p, err)
	}
	return err
}

func (p *Control) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaller() {
		if err := oprot.WriteFieldBegin("caller", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:caller: %s", p, err)
		}
		if err := p.Caller.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Caller, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:caller: %s", p, err)
		}
	}
	return err
}

func (p *Control) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Control(%+v)", *p)
}

type Route struct {
	Group string `thrift:"group,1" json:"group"`
}

func NewRoute() *Route {
	return &Route{}
}

func (p *Route) GetGroup() string {
	return p.Group
}
func (p *Route) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Route) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *Route) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Route"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Route) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:group: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return fmt.Errorf("%T.group (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:group: %s", p, err)
	}
	return err
}

func (p *Route) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Route(%+v)", *p)
}

type Endpoint struct {
	Sname  string `thrift:"sname,1" json:"sname"`
	Sid    string `thrift:"sid,2" json:"sid"`
	Method string `thrift:"method,3" json:"method"`
}

func NewEndpoint() *Endpoint {
	return &Endpoint{}
}

func (p *Endpoint) GetSname() string {
	return p.Sname
}

func (p *Endpoint) GetSid() string {
	return p.Sid
}

func (p *Endpoint) GetMethod() string {
	return p.Method
}
func (p *Endpoint) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Endpoint) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Sname = v
	}
	return nil
}

func (p *Endpoint) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Sid = v
	}
	return nil
}

func (p *Endpoint) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Method = v
	}
	return nil
}

func (p *Endpoint) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Endpoint"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Endpoint) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sname)); err != nil {
		return fmt.Errorf("%T.sname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sname: %s", p, err)
	}
	return err
}

func (p *Endpoint) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sid)); err != nil {
		return fmt.Errorf("%T.sid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sid: %s", p, err)
	}
	return err
}

func (p *Endpoint) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:method: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Method)); err != nil {
		return fmt.Errorf("%T.method (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:method: %s", p, err)
	}
	return err
}

func (p *Endpoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Endpoint(%+v)", *p)
}

type Context struct {
	Head    *Head             `thrift:"head,1" json:"head"`
	Spanctx map[string]string `thrift:"spanctx,2" json:"spanctx"`
	Control *Control          `thrift:"control,3" json:"control"`
}

func NewContext() *Context {
	return &Context{}
}

var Context_Head_DEFAULT *Head

func (p *Context) GetHead() *Head {
	if !p.IsSetHead() {
		return Context_Head_DEFAULT
	}
	return p.Head
}

var Context_Spanctx_DEFAULT map[string]string

func (p *Context) GetSpanctx() map[string]string {
	return p.Spanctx
}

var Context_Control_DEFAULT *Control

func (p *Context) GetControl() *Control {
	if !p.IsSetControl() {
		return Context_Control_DEFAULT
	}
	return p.Control
}
func (p *Context) IsSetHead() bool {
	return p.Head != nil
}

func (p *Context) IsSetSpanctx() bool {
	return p.Spanctx != nil
}

func (p *Context) IsSetControl() bool {
	return p.Control != nil
}

func (p *Context) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Context) ReadField1(iprot thrift.TProtocol) error {
	p.Head = &Head{}
	if err := p.Head.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Head, err)
	}
	return nil
}

func (p *Context) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Spanctx = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Spanctx[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Context) ReadField3(iprot thrift.TProtocol) error {
	p.Control = &Control{}
	if err := p.Control.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Control, err)
	}
	return nil
}

func (p *Context) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Context"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Context) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHead() {
		if err := oprot.WriteFieldBegin("head", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:head: %s", p, err)
		}
		if err := p.Head.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Head, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:head: %s", p, err)
		}
	}
	return err
}

func (p *Context) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanctx() {
		if err := oprot.WriteFieldBegin("spanctx", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:spanctx: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Spanctx)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Spanctx {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:spanctx: %s", p, err)
		}
	}
	return err
}

func (p *Context) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetControl() {
		if err := oprot.WriteFieldBegin("control", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:control: %s", p, err)
		}
		if err := p.Control.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Control, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:control: %s", p, err)
		}
	}
	return err
}

func (p *Context) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Context(%+v)", *p)
}
